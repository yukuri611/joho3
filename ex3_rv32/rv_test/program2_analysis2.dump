00001044 <store_int>:

#スタックフレームの確保およびレジスタに保存されている値の退避
    1044:	fd010113          	addi	sp,sp,-48 # 23fd0 <_end+0x1fd0>
    1048:	02112623          	sw	ra,44(sp)
    104c:	02812423          	sw	s0,40(sp)
    1050:	02912223          	sw	s1,36(sp)
    1054:	03212023          	sw	s2,32(sp)
    1058:	01312e23          	sw	s3,28(sp)
    105c:	01412c23          	sw	s4,24(sp)
    1060:	01512a23          	sw	s5,20(sp)
    1064:	01612823          	sw	s6,16(sp)

# レジスタの初期設定
    1068:	00050a13          	mv	s4,a0   # s4 = store ポインタ
    106c:	00058a93          	mv	s5,a1   # s5 = terminated ポインタ
    1070:	00000413          	li	s0,0    # rx_pos = 0
    1074:	00021937          	lui	s2,0x21
    1078:	00800493          	li	s1,8    # s1 = BACK_SPACE_CODE (0x08)
    107c:	01a00993          	li	s3,26   # s3 = TERMINATE_CODE (Ctrl-Z, 26)
    1080:	00a00b13          	li	s6,10   # s6 = '\n' (10)
    1084:	0200006f          	j	10a4 <store_int+0x60>   # ループ先頭へジャンプ

# バックスペース処理
    1088:	00040793          	mv	a5,s0
    108c:	00040a63          	beqz	s0,10a0 <store_int+0x5c>
    1090:	01040793          	addi	a5,s0,16
    1094:	002787b3          	add	a5,a5,sp
    1098:	fe078a23          	sb	zero,-12(a5)
    109c:	fff40793          	addi	a5,s0,-1    # a5 = rx_pos - 1

# rx_posの更新
    10a0:	00078413          	mv	s0,a5   # rx_pos = a5

# メインのループ部分
    10a4:	57492783          	lw	a5,1396(s2)     # 21574 <io_getch> 
    10a8:	000780e7          	jalr	a5      # io_getch()をコール（取得した文字はa0に格納）
    
    # バックスペースの判定
    10ac:	fc950ee3          	beq	a0,s1,1088 <store_int+0x44>     # ch == BACK_SPACE_CODE のとき、「バックスペース処理」に移動
    
    # 終了コード(Ctrl-Z)判定
    10b0:	07350263          	beq	a0,s3,1114 <store_int+0xd0>     # ch == TERMINATE_CODEのとき、「Ctrl-Z 検出時の処理」に移動

    # バッファにio_getch()で確保した文字を格納
    10b4:	00140793          	addi	a5,s0,1
    10b8:	01040713          	addi	a4,s0,16
    10bc:	00270433          	add	s0,a4,sp
    10c0:	fea40a23          	sb	a0,-12(s0)      # rx_buf[rx_pos] = ch

    # 改行 '\n' 判定
    10c4:	07650c63          	beq	a0,s6,113c <store_int+0xf8> # ch == '\n'のとき、「終端文字の追加」へジャンプ
    
    # バッファオーバーフロー判定
    10c8:	fc979ce3          	bne	a5,s1,10a0 <store_int+0x5c> 
    
    #　改行表示 (バッファ長オーバー時)
    10cc:	00010623          	sb	zero,12(sp)
    10d0:	000217b7          	lui	a5,0x21
    10d4:	5787a783          	lw	a5,1400(a5) # 21578 <io_putch>
    10d8:	00a00513          	li	a0,10
    10dc:	000780e7          	jalr	a5      # io_putch('\n')

# 文字列 → 整数変換
    10e0:	00410513          	addi	a0,sp,4
    10e4:	210040ef          	jal	52f4 <atoi>
    10e8:	00aa2023          	sw	a0,0(s4)    # *store = atoiの戻り値

# レジスタ・スタック復元
    10ec:	02c12083          	lw	ra,44(sp)
    10f0:	02812403          	lw	s0,40(sp)
    10f4:	02412483          	lw	s1,36(sp)
    10f8:	02012903          	lw	s2,32(sp)
    10fc:	01c12983          	lw	s3,28(sp)
    1100:	01812a03          	lw	s4,24(sp)
    1104:	01412a83          	lw	s5,20(sp)
    1108:	01012b03          	lw	s6,16(sp)
    110c:	03010113          	addi	sp,sp,48
    1110:	00008067          	ret

# Ctrl-Z 検出時の処理
    1114:	01078793          	addi	a5,a5,16
    1118:	002787b3          	add	a5,a5,sp
    111c:	fe078a23          	sb	zero,-12(a5)
    1120:	00410593          	addi	a1,sp,4
    1124:	00020537          	lui	a0,0x20
    1128:	33c50513          	addi	a0,a0,828 # 2033c <__clz_tab+0x100>
    112c:	4f8000ef          	jal	1624 <printf>
    1130:	00100793          	li	a5,1
    1134:	00faa023          	sw	a5,0(s5)
    1138:	fb5ff06f          	j	10ec <store_int+0xa8> #「レジスタ・スタック復元」へジャンプ

# 終端文字の追加
    113c:	01078793          	addi	a5,a5,16
    1140:	002787b3          	add	a5,a5,sp
    1144:	fe078a23          	sb	zero,-12(a5)    # rx_buf[rx_pos]=0
    1148:	f99ff06f          	j	10e0 <store_int+0x9c>   # 文字列 → 整数変換へジャンプ





0000114c <main>:
#スタックフレームの確保およびレジスタに保存されている値の退避
    114c:	fc010113          	addi	sp,sp,-64
    1150:	02112e23          	sw	ra,60(sp)
    1154:	02812c23          	sw	s0,56(sp)
    1158:	02912a23          	sw	s1,52(sp)
    115c:	03212823          	sw	s2,48(sp)
    1160:	03312623          	sw	s3,44(sp)
    1164:	03412423          	sw	s4,40(sp)
    1168:	03512223          	sw	s5,36(sp)
    116c:	03612023          	sw	s6,32(sp)
    1170:	01712e23          	sw	s7,28(sp)
    1174:	01812c23          	sw	s8,24(sp)
    1178:	01912a23          	sw	s9,20(sp)

    117c:	31c010ef          	jal	2498 <start_profiler>   # start_profiler()
    1180:	00012623          	sw	zero,12(sp)     # terminated = 0

#ループ開始
    1184:	00020ab7          	lui	s5,0x20
    1188:	00c10913          	addi	s2,sp,12
    118c:	00410a13          	addi	s4,sp,4
    1190:	00020c37          	lui	s8,0x20
    1194:	00020bb7          	lui	s7,0x20
    1198:	00810b13          	addi	s6,sp,8
    119c:	00020cb7          	lui	s9,0x20
    11a0:	0100006f          	j	11b0 <main+0x64>

# <print_error> b==0 の時
    11a4:	00020537          	lui	a0,0x20
    11a8:	3ac50513          	addi	a0,a0,940 # 203ac <__clz_tab+0x170>
    11ac:	418000ef          	jal	15c4 <puts>
    11b0:	358a8513          	addi	a0,s5,856 # 20358 <__clz_tab+0x11c>

# Number A 入力
    11b4:	410000ef          	jal	15c4 <puts>
    11b8:	00090593          	mv	a1,s2
    11bc:	000a0513          	mv	a0,s4
    11c0:	e85ff0ef          	jal	1044 <store_int>

    #終了判定
    11c4:	00c12783          	lw	a5,12(sp)
    11c8:	08079e63          	bnez	a5,1264 <main+0x118>    # if(terminated) 終了処理へジャンプ
    
    # aの表示
    11cc:	00412483          	lw	s1,4(sp)
    11d0:	00048593          	mv	a1,s1
    11d4:	364c0513          	addi	a0,s8,868 # 20364 <__clz_tab+0x128>
    11d8:	44c000ef          	jal	1624 <printf>

# Number B 入力
    11dc:	36cb8513          	addi	a0,s7,876 # 2036c <__clz_tab+0x130>
    11e0:	3e4000ef          	jal	15c4 <puts>
    11e4:	00090593          	mv	a1,s2
    11e8:	000b0513          	mv	a0,s6
    11ec:	e59ff0ef          	jal	1044 <store_int>

    #終了判定
    11f0:	00c12783          	lw	a5,12(sp)
    11f4:	06079863          	bnez	a5,1264 <main+0x118>    # if(terminated) 終了処理へジャンプ
    
    # bの表示
    11f8:	00812403          	lw	s0,8(sp)
    11fc:	00040593          	mv	a1,s0
    1200:	378c8513          	addi	a0,s9,888 # 20378 <__clz_tab+0x13c>
    1204:	420000ef          	jal	1624 <printf>

# 0除算判定
    1208:	f8040ee3          	beqz	s0,11a4 <main+0x58>

# Division result の計算・表示
    120c:	00048513          	mv	a0,s1
    1210:	479030ef          	jal	4e88 <__floatsisf>
    1214:	00050993          	mv	s3,a0
    1218:	00040513          	mv	a0,s0
    121c:	46d030ef          	jal	4e88 <__floatsisf>
    1220:	00050593          	mv	a1,a0
    1224:	00098513          	mv	a0,s3
    1228:	0ed030ef          	jal	4b14 <__divsf3>
    122c:	56d030ef          	jal	4f98 <__extendsfdf2>
    1230:	00050613          	mv	a2,a0
    1234:	00058693          	mv	a3,a1
    1238:	00020537          	lui	a0,0x20
    123c:	38050513          	addi	a0,a0,896 # 20380 <__clz_tab+0x144>
    1240:	3e4000ef          	jal	1624 <printf>

# Mod result の計算・表示
    1244:	00040593          	mv	a1,s0
    1248:	00048513          	mv	a0,s1
    124c:	6e1030ef          	jal	512c <__modsi3>
    1250:	00050593          	mv	a1,a0
    1254:	00020537          	lui	a0,0x20
    1258:	39850513          	addi	a0,a0,920 # 20398 <__clz_tab+0x15c>
    125c:	3c8000ef          	jal	1624 <printf>

# ループ再開
    1260:	f51ff06f          	j	11b0 <main+0x64>

# 終了処理
    1264:	00020537          	lui	a0,0x20
    1268:	3cc50513          	addi	a0,a0,972 # 203cc <__clz_tab+0x190>
    126c:	358000ef          	jal	15c4 <puts>
    1270:	24c010ef          	jal	24bc <end_profiler>
    1274:	00000513          	li	a0,0
    1278:	03c12083          	lw	ra,60(sp)
    127c:	03812403          	lw	s0,56(sp)
    1280:	03412483          	lw	s1,52(sp)
    1284:	03012903          	lw	s2,48(sp)
    1288:	02c12983          	lw	s3,44(sp)
    128c:	02812a03          	lw	s4,40(sp)
    1290:	02412a83          	lw	s5,36(sp)
    1294:	02012b03          	lw	s6,32(sp)
    1298:	01c12b83          	lw	s7,28(sp)
    129c:	01812c03          	lw	s8,24(sp)
    12a0:	01412c83          	lw	s9,20(sp)
    12a4:	04010113          	addi	sp,sp,64
    12a8:	00008067          	ret

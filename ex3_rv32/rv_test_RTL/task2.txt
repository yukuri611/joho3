wire [13:0] OP_type;   /// { ADD, SUB, LT, LTU, AND, OR, XOR, SLL, SRL, SRA, EQ, NE, GE, GEU }


以下RV32I_ARCH1_CORE.vのALUモジュール

module ALU (x, y, OP_type, out);
input [31:0] x, y;
input [13:0] OP_type;
output [31:0] out;

function [31:0] SLL;
input [31:0] x;
input [4:0] y;
reg [31:0] x1, x2, x4, x8;
begin
    x1  = (y[0]) ? {  x[30:0], 1'b0 } : x;
    x2  = (y[1]) ? { x1[29:0], 2'b0 } : x1;
    x4  = (y[2]) ? { x2[27:0], 4'b0 } : x2;
    x8  = (y[3]) ? { x4[23:0], 8'b0 } : x4;
    SLL = (y[4]) ? { x8[15:0], 16'b0 } : x8;
end
endfunction

function [31:0] SRX;
input [31:0] x;
input [4:0] y;
input sra;
reg [31:0] x1, x2, x4, x8;
reg t;
begin
    t = x[31] & sra;
    x1  = (y[0]) ? { t, x[31:1] } : x;
    x2  = (y[1]) ? { {2{t}}, x1[31:2] } : x1;
    x4  = (y[2]) ? { {4{t}}, x2[31:4] } : x2;
    x8  = (y[3]) ? { {8{t}}, x4[31:8] } : x4;
    SRX = (y[4]) ? { {16{t}}, x8[31:16] } : x8;
end
endfunction

    wire        sub = (OP_type[`SUB] | OP_type[`LTU] | OP_type[`GEU] | OP_type[`LT] | OP_type[`GE]);
    wire [31:0] y2 = (sub) ? ~y : y;
    wire [32:0] as33 = {1'b0, x} + {1'b0, y2} + sub;
    wire        c31 = as33[32];
    wire [31:0] as32 = as33[31:0];
wire [31:0] exor = x ^ y;
wire        ne = (|exor);
wire        sign_x = x[31];
wire        sign_y = y[31];
wire        ge = c31 ^ sign_x ^ sign_y;
    wire [31:0] a_as32 = (OP_type[`ADD] | OP_type[`SUB]) ? as32 : 32'b0;
    wire [31:0] a_and = (OP_type[`AND]) ? (x & y) : 32'b0;
    wire [31:0] a_or  = (OP_type[`OR]) ? (x | y) : 32'b0;
    wire [31:0] a_xor = (OP_type[`XOR]) ? exor : 32'b0;
    wire [31:0] a_sll = (OP_type[`SLL]) ? SLL(x, y[4:0]) : 32'b0;
    wire [31:0] a_srx = (OP_type[`SRL] | OP_type[`SRA]) ? SRX(x, y[4:0], OP_type[`SRA]) : 32'b0;
    wire        cmp = (OP_type[`LTU] & ~c31) | (OP_type[`GEU] & c31) |
                      (OP_type[`LT]  & ~ge)  | (OP_type[`GE]  & ge)  |
                      (OP_type[`NE]  & ne)   | (OP_type[`EQ]  & ~ne);
    assign out = a_as32 | a_and | a_or | a_xor | a_sll | a_srx | {31'b0, cmp};

endmodule   /// ALU
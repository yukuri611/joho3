/////////////////////////////////////////////////////////////////
//////          Auto-generated by C2RTL+LLVM.11.0.0        //////
//////             C2RTL.ver.4.4.0 (10.02.2025)            //////
//////               All rights reserved                   //////
////// (C)2016-2025, New System Vision R&D Institute (NSV) //////
//////           CURRENT TIME 10:26:28 02.04.2025          //////
/////////////////////////////////////////////////////////////////


/*******************************************************
OPT_DisableStdErrOutput                           : 1
OPT_SilenceMsg                                    : 1
OPT_DisableTopCallerPointToLink                   : 0
OPT_DisableTopCallerArrayConversion               : 1
OPT_RangePrintMode                                : 0
OPT_RTLUsePipeFunction                            : 0
OPT_RTLUsePipeStackCompression                    : 0
OPT_RTLUsePipeWorkspace                           : 0
OPT_RTLMaxPipeFunctionSize                        : 0
OPT_RTLExpandUnmatchedBWLeafArray                 : 1
OPT_RTLDisableBaseClassName                       : 1
OPT_RTLShowLLVM_Inst                              : 0
OPT_RTLPipeRegAsyncReset                          : 1
OPT_RTL_FPGA_Mode                                 : 0
OPT_RTL_DualPortMemoryWrite1st                    : 0
OPT_RTL_RAM_INIT                                  : 0
OPT_RTL_DISABLE_VECTOR_DISPLAY                    : 1
OPT_RTL_DISABLE_VCD_DUMP                          : 1
OPT_DisableArrayLoadDecomposition                 : 1
OPT_RegArrayAddrPos                               : 1
OPT_DBG_ReduceArrayIndexLoad                      : 0
OPT_DBG_ComputeDist                               : 0
OPT_PrintRangeBits                                : 1
OPT_PrintExpandNodeAddr                           : 0
OPT_DBG_Range                                     : 0
OPT_DBG_RangeTruncate                             : 0
OPT_DBG_AssignPropagation                         : 1
OPT_ConstPrintMode                                : 1
OPT_InitializeWireRangeFromBitWidth               : 1
OPT_ForcePrintRangeUpdate                         : 0
OPT_PrintAllData                                  : 0
OPT_PrintAddDefNode                               : 0
OPT_DBG_Connectivity                              : 0
OPT_DBG_SplitDefUseChain                          : 0
OPT_DBG_IsReachable                               : 0
OPT_DBG_IsReachableInternal                       : 0
OPT_DBG_PipeDist                                  : 0
OPT_PrintPipeDist                                 : 0
OPT_DBG_PipeStageInitialize                       : 0
OPT_DBG_ShowLLVMTypeValue                         : 0
OPT_DBG_getContiguousData                         : 0
OPT_DBG_BWReachableNodes                          : 0
OPT_DBG_FWReachableNodes                          : 0
OPT_DBG_PipeDistUpdate                            : 0
OPT_HidePrintGateDist                             : 0
OPT_DefaultPipeStageCount                         : 8
OPT_OverridePipeStageCount                        : 0
OPT_PrintPipeStageCreate                          : 3
OPT_ShowRange                                     : 1
OPT_ShowGateCost                                  : 1
OPT_ShowBlockAddressInPathName                    : 0
OPT_ShowPathLevelsInPathName                      : 0
OPT_PrintCFGConnectivity                          : 1
OPT_ShowMiscFlag                                  : 0
OPT_SplitDefUseChainPending                       : 0
OPT_DBG_createIODistHeap                          : 0
OPT_EnableSelectionPropagation                    : 1
OPT_RelaxSelectionPropagationConstraint           : 1
OPT_DataLeafElementMaxCount                       : 100000
OPT_LoopUnrollMaxTripCount                        : 10000
OPT_EnableExternalRangeCap                        : 1
OPT_MergeMultipleArrayWrites                      : 1
OPT_MergeMultipleArrayReads                       : 1
OPT_PrintPipeGateStat                             : 0
OPT_PrintAreaProfile                              : 0
OPT_PrintCriticalPathInfo                         : 1
OPT_PrintControlPathsOnly                         : 0
OPT_PrintPhiBBCond                                : 0
OPT_EnableLLVMPatchOnShortProductSumBug           : 1
OPT_PrintInternalGlobals                          : 2
OPT_PrintCreateC2RType                            : 0
OPT_EnableCarryComputationMerge                   : 1
OPT_EnableAndOrRetiming                           : 1
OPT_RestrictAndOrRetimingOnTrees                  : 0
OPT_EnableOrRestructuring                         : 1
OPT_MultType                                      : 0
OPT_MultReduceRatio                               : 0
OPT_EnableXorTreeReduction                        : 1
OPT_MuxTreeReductionMinHeight                     : 0
OPT_PrintTreeHeightReductionDetail                : 0
OPT_EnableMuxQualifierReduction                   : 1
OPT_RestrictCreateMuxQualifier                    : 0
OPT_MuxQualifierNodeCountThreshold                : 5
OPT_EnableInternalNodeProbes                      : 0
OPT_PrintCFGConnection                            : 2
OPT_ClassMethodInstanceCount                      : 1
OPT_PIPE_OPT_UseRegCountAnnealing                 : 0
OPT_PIPE_OPT_AnnealingInitTempFactor              : 1000
OPT_PIPE_OPT_AnnealingCoolingTempFactor           : 990
OPT_PIPE_OPT_UseDistSlope                         : 0
OPT_PIPE_OPT_SelectMaxDist                        : 1
OPT_PIPE_OPT_SelectRandDistProb                   : 0
OPT_PIPE_OPT_RandSeed                             : 0
OPT_PIPE_OPT_distIterNodeCountRatio               : 0
OPT_PIPE_OPT_distIterCount                        : 500
OPT_PIPE_OPT_distRetryCount                       : 20
OPT_PIPE_OPT_regIterCount                         : 100
OPT_PIPE_OPT_regRetryCount                        : 30
OPT_PIPE_OPT_enableLateInsertion                  : 1
OPT_PIPE_OPT_assignDirectPathPipeStage            : 1
OPT_PIPE_OPT_minPipeDistCost                      : 5
OPT_PIPE_OPT_minimizePipeDistSquared              : 1
OPT_RTL_RAM_Exclusive_RW_NoChange                 : 1
OPT_PrintRangeTrucationException                  : 2
OPT_PrintSkipDependenceInputs                     : 0
OPT_SynchronizeDirectSignalPath                   : 1
OPT_DisableRelocateFeedbackPath                   : 0
OPT_DisableIncompatibleDirectPath                 : 0
OPT_SynchronizeStructMemberFeedbackWires          : 0
OPT_DefaultBitPreciseRTLC                         : 1
OPT_DisableRTLComments                            : 0
OPT_EnableVOBFS                                   : 0
OPT_DBG_NodeInst                                  : 0
OPT_Enable_printAllocaNodeMap                     : 0
OPT_Enable_printBlockInfo                         : 0
OPT_Enable_printReachablePaths                    : 0
OPT_RTL_NoTestVectorReturnValue                   : 0
OPT_RTL_ForceOutputPortOnTopArg                   : 1
OPT_DBG_GetCreateType                             : 0
OPT_DBG_INTERNAL_GLOBALS                          : 0
OPT_DBG_adjustDirectPathNodes                     : 0
OPT_EnableAndMaskReduction                        : 1
OPT_PrintCriticalPathMsg                          : 0
OPT_EnableLogFileOpenMsg                          : 0
OPT_MultDelayFactor                               : 0
OPT_CarryDelayFactor                              : 0
OPT_UseCheckSumTestVector                         : 0
OPT_TestVectorMaxSize                             : 0
OPT_EnableRTLCCollapsing                          : 0
OPT_EnableRTLCLogicalCollapsing                   : 0
OPT_EnablePrvStateCopy                            : 0
OPT_MaxFanoutRTLCCollapsing                       : 1
OPT_MaxAccFanoutRTLCCollapsing                    : 1
OPT_EnableRegArrayIndexWrite                      : 1
OPT_DBGPipeRelocate                               : 0
OPT_DisableMethodNameBinding                      : 0
OPT_EnableVarIndexAccessOnArrayStruct             : 1
OPT_DisableVarIndexAccessOnArrayStructWires       : 1
OPT_RTL_OmitPipeStageInfoInRTLLog                 : 0
OPT_TestBenchFineGrainLogThreshold                : 100000
OPT_EnableGateFanoutModel                         : 0
OPT_GateModel_EG_area                             : 1000
OPT_GateModel_EG_delay                            : 1000
OPT_GateModel_CG_area                             : 2000
OPT_GateModel_CG_delay                            : 2000
OPT_GateModel_FO_factor                           : 500
OPT_CriticalPathFOFactorSweepCount                : 10
OPT_CriticalPathSortType                          : 0
OPT_SlackHistogramSize                            : 20
OPT_EnableRedirectPipDistAlignedWireFeedbackUsers : 1
OPT_IgnoreUnassignedArrayReference                : 0
OPT_PatchRTLC_varIndexEnabled                     : 0
OPT_IgnoreUnmatchedBWLeafArray                    : 0
OPT_DisableDivDecompsition                        : 0
OPT_EnableUseSystemOutputSV                       : 1
OPT_EnablePipeRegBitWidthZLB                      : 1
OPT_EnablePipeRegBitWidthUsrTruncate              : 1
OPT_EnableInitRegWriter                           : 0
OPT_SplitRegFeedbackOnMaxStateDepth               : 0
OPT_EnableSplitRegFeedback                        : 0
OPT_DBGEnableSplitRegFeedback                     : 0
OPT_DBGStateGraphDepth                            : 0
OPT_EnableErrorOnUncleanSplitRegFeedback          : 0
OPT_DBGVarIndexGroup                              : 0
OPT_DBGMergeGroup                                 : 0
OPT_RTL_EnableMemWrapperAtSystemLevel             : 0
OPT_EnableMemoryByteAddress                       : 0
OPT_ExtractMemoryPortPaths                        : 0
OPT_ShowAllFWCombPaths                            : 0
OPT_ShowFWCombPathsWithWireFeedback               : 1
OPT_ShowPipeLockedNodes                           : 0
OPT_UseImplicitClockGating                        : 1
OPT_EnablePipeRegClockGating                      : 0
OPT_EnablePipeRegClockGatingMonitor               : 0
OPT_EnableMemoryClockGating                       : 0
OPT_DBGcomputePipeDistBW                          : 0
OPT_RTL_USE_MEMORY_INIT_FILE_MACRO                : 1
*******************************************************/
/*-------------------------------------------------------------------------------------------------------------
final pipe layout
P( 1): 147 nodes,      0.0 gates,    0 pipeRegs (    0 pipes,    0 states, 0 FBs), IO(  0,  0),GIO(16,114),D(   0.0),pd( 0, 0)
-------------------------------------------------------------------------------------------------------------
Total: 147 nodes,      0.0 gates,    0 pipeRegs (    0 pipes,    0 states, 0 FBs), I(  0),O(  0),D(   0.0),maxD(   0.0 :    0.0)
Total       0.0 gates (combined) :      0.0 (comb-gates) +    0 (reg-bits) * 6.50 (gates/FF) + 0 memBits
-------------------------------------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------------------------------------

UART_AXI4L_step.0(ROOT_CP,G.axi_uart[0],G.(*axi).s_ch[0],G.(*io).uart[0],G.(*io).intr.p[0] ) ; (rv32.cpp:L142)
941 nodes, 5,863.5 totalGates, 2,763 combGates, 477 regBits, 0 memBits, 0 totalMemBits, 2 pipeStages, maxPipeDist = 47.0, maxCriticalDist = 47.0
    OP(+) : U32 x 3 (288 gates), U17 x 1 (51 gates), U16 x 2 (96 gates), U5 x 6 (90 gates), S5 x 2 (30 gates)
    OP(+) : U4 x 1 (12 gates)
----- OP(+) : total 567 gates, 15 ops -----
    OP(&) : U8 x 1 (8 gates), U1 x 144 (144 gates)
----- OP(&) : total 152 gates, 145 ops -----
    OP(|) : U8 x 5 (36 gates), U7 x 4 (21 gates), U6 x 1 (5 gates), U5 x 1 (5 gates), S5 x 2 (8 gates)
    OP(|) : U2 x 14 (20 gates), U1 x 99 (99 gates)
----- OP(|) : total 194 gates, 126 ops -----
    OP(^) : U1 x 2 (4 gates)
----- OP(^) : total 4 gates, 2 ops -----
    OP(==) : U1 x 50 (214 gates)
----- OP(==) : total 214 gates, 50 ops -----
    OP(!=) : U1 x 3 (29 gates)
----- OP(!=) : total 29 gates, 3 ops -----
    OP(<) : U1 x 4 (174 gates)
----- OP(<) : total 174 gates, 4 ops -----
    OP(>) : U1 x 1 (16 gates)
----- OP(>) : total 16 gates, 1 ops -----
    OP(?) : U32 x 6 (224 gates), U16 x 5 (80 gates), U8 x 10 (88 gates), U7 x 4 (28 gates), U6 x 1 (6 gates)
    OP(?) : U5 x 22 (130 gates), S5 x 3 (15 gates), U4 x 5 (20 gates), U3 x 3 (9 gates), U2 x 22 (46 gates)
    OP(?) : U1 x 38 (41 gates)
----- OP(?) : total 687 gates, 119 ops -----
    OP([]) : U20 x 1 (600 gates), U8 x 3 (96 gates), U3 x 1 (18 gates), U2 x 1 (12 gates)
----- OP([]) : total 726 gates, 6 ops -----
========= ALL : 2,763 gates =========
-------------------------------------------------------------------------------------------------------------

UART_AXI4L_step.1(UART_AXI4L_step.0.OUT,ROOT_CP,G.axi_uart[1],G.(*axi).s_ch[1],G.(*io).uart[1],G.(*io).intr.p[1] ) ; (rv32.cpp:L142)
941 nodes, 5,863.5 totalGates, 2,763 combGates, 477 regBits, 0 memBits, 0 totalMemBits, 2 pipeStages, maxPipeDist = 47.0, maxCriticalDist = 47.0
    OP(+) : U32 x 3 (288 gates), U17 x 1 (51 gates), U16 x 2 (96 gates), U5 x 6 (90 gates), S5 x 2 (30 gates)
    OP(+) : U4 x 1 (12 gates)
----- OP(+) : total 567 gates, 15 ops -----
    OP(&) : U8 x 1 (8 gates), U1 x 144 (144 gates)
----- OP(&) : total 152 gates, 145 ops -----
    OP(|) : U8 x 5 (36 gates), U7 x 4 (21 gates), U6 x 1 (5 gates), U5 x 1 (5 gates), S5 x 2 (8 gates)
    OP(|) : U2 x 14 (20 gates), U1 x 99 (99 gates)
----- OP(|) : total 194 gates, 126 ops -----
    OP(^) : U1 x 2 (4 gates)
----- OP(^) : total 4 gates, 2 ops -----
    OP(==) : U1 x 50 (214 gates)
----- OP(==) : total 214 gates, 50 ops -----
    OP(!=) : U1 x 3 (29 gates)
----- OP(!=) : total 29 gates, 3 ops -----
    OP(<) : U1 x 4 (174 gates)
----- OP(<) : total 174 gates, 4 ops -----
    OP(>) : U1 x 1 (16 gates)
----- OP(>) : total 16 gates, 1 ops -----
    OP(?) : U32 x 6 (224 gates), U16 x 5 (80 gates), U8 x 10 (88 gates), U7 x 4 (28 gates), U6 x 1 (6 gates)
    OP(?) : U5 x 22 (130 gates), S5 x 3 (15 gates), U4 x 5 (20 gates), U3 x 3 (9 gates), U2 x 22 (46 gates)
    OP(?) : U1 x 38 (41 gates)
----- OP(?) : total 687 gates, 119 ops -----
    OP([]) : U20 x 1 (600 gates), U8 x 3 (96 gates), U3 x 1 (18 gates), U2 x 1 (12 gates)
----- OP([]) : total 726 gates, 6 ops -----
========= ALL : 2,763 gates =========
-------------------------------------------------------------------------------------------------------------

GPIO_AXI4L_step.2(UART_AXI4L_step.0.OUT,UART_AXI4L_step.1.OUT,ROOT_CP,G.axi_gpio,G.(*axi).s_ch[2],G.(*io).gpio,G.(*io).dbg ) ; (rv32.cpp:L144)
387 nodes, 5,737.5 totalGates, 2,299 combGates, 529 regBits, 0 memBits, 0 totalMemBits, 2 pipeStages, maxPipeDist = 35.0, maxCriticalDist = 35.0
    OP(+) : U32 x 4 (384 gates), S5 x 2 (30 gates), U4 x 1 (12 gates)
----- OP(+) : total 426 gates, 7 ops -----
    OP(<<) : U8 x 1 (6 gates)
----- OP(<<) : total 6 gates, 1 ops -----
    OP(>>) : U32 x 3 (960 gates)
----- OP(>>) : total 960 gates, 3 ops -----
    OP(&) : U8 x 1 (8 gates), U1 x 41 (41 gates)
----- OP(&) : total 49 gates, 42 ops -----
    OP(|) : U32 x 2 (36 gates), U8 x 2 (14 gates), U7 x 2 (14 gates), U5 x 1 (5 gates), S5 x 2 (8 gates)
    OP(|) : U2 x 4 (6 gates), U1 x 30 (30 gates)
----- OP(|) : total 113 gates, 43 ops -----
    OP(==) : U1 x 17 (48 gates)
----- OP(==) : total 48 gates, 17 ops -----
    OP(!=) : U1 x 1 (4 gates)
----- OP(!=) : total 4 gates, 1 ops -----
    OP(<) : U1 x 3 (13 gates)
----- OP(<) : total 13 gates, 3 ops -----
    OP(?) : U32 x 8 (288 gates), U8 x 1 (8 gates), U7 x 6 (42 gates), U5 x 3 (15 gates), S5 x 2 (10 gates)
    OP(?) : U4 x 6 (28 gates), U2 x 10 (22 gates), U1 x 7 (7 gates)
----- OP(?) : total 420 gates, 43 ops -----
    OP([]) : U32 x 1 (64 gates), U7 x 1 (196 gates)
----- OP([]) : total 260 gates, 2 ops -----
========= ALL : 2,299 gates =========
-------------------------------------------------------------------------------------------------------------

RV32I_ARCH1_step.3(UART_AXI4L_step.0.OUT,UART_AXI4L_step.1.OUT,GPIO_AXI4L_step.2.OUT,ROOT_CP,G.arch1,G.(*axi).m_ch[0],G.(*io).intr,G.(*io).dbg ) ; (rv32.cpp:L145)
1,959 nodes, 35,920.5 totalGates, 21,094 combGates, 2,281 regBits, 2,097,152 memBits, 2,097,152 totalMemBits, 2 pipeStages, maxPipeDist = 216.0, maxCriticalDist = 216.0
    MT_SingleInit : U32(bits) x 65,536(words) x 1
    OP(+) : U33 x 2 (393 gates), U32 x 8 (978 gates), U5 x 1 (15 gates), S5 x 1 (15 gates), U3 x 1 (9 gates)
----- OP(+) : total 1,410 gates, 13 ops -----
    OP(<<) : U32 x 2 (384 gates), U5 x 1 (8 gates), U4 x 1 (4 gates)
----- OP(<<) : total 396 gates, 4 ops -----
    OP(>>) : U33 x 1 (396 gates), U32 x 1 (320 gates)
----- OP(>>) : total 716 gates, 2 ops -----
    OP(&) : U32 x 6 (168 gates), U16 x 1 (16 gates), U13 x 1 (13 gates), U12 x 1 (12 gates), U8 x 2 (16 gates)
    OP(&) : U7 x 2 (14 gates), U5 x 1 (5 gates), U4 x 1 (4 gates), U3 x 1 (3 gates), U1 x 223 (223 gates)
----- OP(&) : total 474 gates, 239 ops -----
    OP(|) : S33 x 2 (64 gates), U32 x 56 (1,694 gates), S32 x 2 (64 gates), U31 x 1 (12 gates), S31 x 1 (30 gates)
    OP(|) : S29 x 1 (28 gates), S25 x 1 (24 gates), S21 x 2 (32 gates), S17 x 2 (25 gates), U16 x 4 (41 gates)
    OP(|) : U14 x 7 (62 gates), U13 x 2 (21 gates), S13 x 4 (27 gates), U12 x 2 (19 gates), U11 x 4 (30 gates)
    OP(|) : U9 x 1 (8 gates), U8 x 1 (1 gates), U7 x 4 (17 gates), U5 x 3 (11 gates), S5 x 2 (2 gates)
    OP(|) : U4 x 3 (9 gates), U3 x 3 (5 gates), U2 x 11 (18 gates), U1 x 258 (258 gates)
----- OP(|) : total 2,502 gates, 377 ops -----
    OP(^) : U32 x 1 (64 gates), S32 x 1 (2 gates), U1 x 1 (2 gates)
----- OP(^) : total 68 gates, 3 ops -----
    OP(==) : U1 x 172 (1,437 gates)
----- OP(==) : total 1,437 gates, 172 ops -----
    OP(!=) : U1 x 12 (101 gates)
----- OP(!=) : total 101 gates, 12 ops -----
    OP(<) : U1 x 4 (25 gates)
----- OP(<) : total 25 gates, 4 ops -----
    OP(>) : U1 x 1 (160 gates), U1 x 1 (160 gates)
----- OP(>) : total 320 gates, 2 ops -----
    OP(?) : U32 x 140 (5,920 gates), S32 x 10 (480 gates), U31 x 2 (62 gates), S17 x 3 (68 gates), U16 x 4 (64 gates)
    OP(?) : U14 x 8 (140 gates), U13 x 3 (39 gates), U12 x 6 (72 gates), U11 x 1 (11 gates), U10 x 1 (10 gates)
    OP(?) : U9 x 1 (9 gates), S9 x 2 (18 gates), U8 x 12 (96 gates), U7 x 4 (28 gates), U6 x 3 (18 gates)
    OP(?) : U5 x 13 (65 gates), S5 x 1 (5 gates), U4 x 17 (72 gates), U3 x 11 (42 gates), U2 x 40 (84 gates)
    OP(?) : U1 x 73 (75 gates), S1 x 1 (1 gates)
----- OP(?) : total 7,379 gates, 356 ops -----
    OP([]) : U32 x 3 (5,952 gates), U12 x 1 (168 gates), U8 x 1 (96 gates), U5 x 1 (50 gates)
----- OP([]) : total 6,266 gates, 6 ops -----
========= ALL : 21,094 gates =========
-------------------------------------------------------------------------------------------------------------

AXI4L_CTRL_1_3__connectChannel.4(UART_AXI4L_step.0.OUT,UART_AXI4L_step.1.OUT,GPIO_AXI4L_step.2.OUT,G.RV32I_ARCH1_step.3.OUT,ROOT_CP,G.axi_bus_ctrl,G.(*axi) ) ; (rv32.cpp:L146)
505 nodes, 1,440 totalGates, 1,362 combGates, 12 regBits, 0 memBits, 0 totalMemBits, 1 pipeStages, maxPipeDist = 30.0, maxCriticalDist = 30.0
    OP(&) : U1 x 72 (72 gates)
----- OP(&) : total 72 gates, 72 ops -----
    OP(|) : U32 x 2 (64 gates), U2 x 4 (8 gates), U1 x 52 (52 gates)
----- OP(|) : total 124 gates, 58 ops -----
    OP(==) : U1 x 28 (148 gates)
----- OP(==) : total 148 gates, 28 ops -----
    OP(?) : U32 x 23 (736 gates), U4 x 18 (72 gates), U3 x 12 (36 gates), U2 x 20 (44 gates), U1 x 122 (130 gates)
----- OP(?) : total 1,018 gates, 195 ops -----
========= ALL : 1,362 gates =========
-------------------------------------------------------------------------------------------------------------
[TOTAL] 4,733 nodes, 54,825 totalGates, 30,281 combGates, 3,776 regBits, 2,097,152 memBits, 2 pipeStages, 216 maxPipeDist
    MT_SingleInit : U32(bits) x 65,536(words) x 1
    OP(+) : U32 x 18 (1,938 gates), U17 x 2 (102 gates), U16 x 4 (192 gates), U5 x 13 (195 gates), S5 x 7 (105 gates)
    OP(+) : U4 x 3 (36 gates), U33 x 2 (393 gates), U3 x 1 (9 gates)
----- OP(+) : total 2,970 gates, 50 ops -----
    OP(&) : U8 x 5 (40 gates), U1 x 624 (624 gates), U32 x 6 (168 gates), U16 x 1 (16 gates), U13 x 1 (13 gates)
    OP(&) : U12 x 1 (12 gates), U7 x 2 (14 gates), U5 x 1 (5 gates), U4 x 1 (4 gates), U3 x 1 (3 gates)
----- OP(&) : total 899 gates, 643 ops -----
    OP(|) : U8 x 13 (87 gates), U7 x 14 (73 gates), U6 x 2 (10 gates), U5 x 6 (26 gates), S5 x 8 (26 gates)
    OP(|) : U2 x 47 (72 gates), U1 x 538 (538 gates), U32 x 60 (1,794 gates), S33 x 2 (64 gates), S32 x 2 (64 gates)
    OP(|) : U31 x 1 (12 gates), S31 x 1 (30 gates), S29 x 1 (28 gates), S25 x 1 (24 gates), S21 x 2 (32 gates)
    OP(|) : S17 x 2 (25 gates), U16 x 4 (41 gates), U14 x 7 (62 gates), U13 x 2 (21 gates), S13 x 4 (27 gates)
    OP(|) : U12 x 2 (19 gates), U11 x 4 (30 gates), U9 x 1 (8 gates), U4 x 3 (9 gates), U3 x 3 (5 gates)
----- OP(|) : total 3,127 gates, 730 ops -----
    OP(^) : U1 x 5 (10 gates), U32 x 1 (64 gates), S32 x 1 (2 gates)
----- OP(^) : total 76 gates, 7 ops -----
    OP(==) : U1 x 317 (2,061 gates)
----- OP(==) : total 2,061 gates, 317 ops -----
    OP(!=) : U1 x 19 (163 gates)
----- OP(!=) : total 163 gates, 19 ops -----
    OP(<) : U1 x 15 (386 gates)
----- OP(<) : total 386 gates, 15 ops -----
    OP(>) : U1 x 4 (352 gates)
----- OP(>) : total 352 gates, 4 ops -----
    OP(?) : U32 x 183 (7,392 gates), U16 x 14 (224 gates), U8 x 33 (280 gates), U7 x 18 (126 gates), U6 x 5 (30 gates)
    OP(?) : U5 x 60 (340 gates), S5 x 9 (45 gates), U4 x 51 (212 gates), U3 x 29 (96 gates), U2 x 114 (242 gates)
    OP(?) : U1 x 278 (294 gates), S32 x 10 (480 gates), U31 x 2 (62 gates), S17 x 3 (68 gates), U14 x 8 (140 gates)
    OP(?) : U13 x 3 (39 gates), U12 x 6 (72 gates), U11 x 1 (11 gates), U10 x 1 (10 gates), U9 x 1 (9 gates)
    OP(?) : S9 x 2 (18 gates), S1 x 1 (1 gates)
----- OP(?) : total 10,191 gates, 832 ops -----
    OP([]) : U20 x 2 (1,200 gates), U8 x 7 (288 gates), U3 x 2 (36 gates), U2 x 2 (24 gates), U32 x 4 (6,016 gates)
    OP([]) : U7 x 1 (196 gates), U12 x 1 (168 gates), U5 x 1 (50 gates)
----- OP([]) : total 7,978 gates, 20 ops -----
    OP(<<) : U8 x 1 (6 gates), U32 x 2 (384 gates), U5 x 1 (8 gates), U4 x 1 (4 gates)
----- OP(<<) : total 402 gates, 5 ops -----
    OP(>>) : U32 x 4 (1,280 gates), U33 x 1 (396 gates)
----- OP(>>) : total 1,676 gates, 5 ops -----
========= ALL : 30,281 gates =========
-------------------------------------------------------------------------------------------------------------*/

/*
+++++++++++++++++++++++++++++++ criticalPath info +++++++++++++++++++++++++++++++
foFactor = 0.000, maxD = 0.000, src = P1 : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
====================== (src: P1) =======================
0 : P1 : dfw(  0.000) dbw(  0.000) slack(  0.000) (NL)[(nop)] ROOT_CP 
CriticalPath : D(0.000), DC(0.000)
************** slack histogram (shsize = 20, totalDelayNodeCount = 0) ************** 
(  0) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  1) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  2) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  3) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  4) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  5) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  6) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  7) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  8) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
(  9) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 10) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 11) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 12) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 13) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 14) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 15) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 16) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 17) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 18) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
( 19) [  0.000 -   0.000] : area(    0.0,    0.0),latency(    0.0,    0.0),carry(    0.0,    0.0),foSum(    0.000,   0.000,   0.000,    0),foAve(0.000,0.000,0.000,0.000),foStd(0.000,0.000,0.000),foNormL2(   0.000),nodeCount(     0)
*/

/**********************************************************
RV32I_SOC_ARCH1 : _Z15RV32I_SOC_ARCH1P7IO_PINSPN5AXI4L3BUSILi1ELi3EEE : root function
-----------------------------------------------------------
(_RV32I_SOC_ARCH1 : 0.0 gates, 147 nodes) : 0.0 comb-gates + 0 pipeBits + 0 stateBits + 0 FBBits
  (excl.sub-modules : 0.0 gates, 147 nodes) : 0.0 comb-gates + 0 pipeBits + 0 stateBits + 0 FBBits
*********************************************************
_RV32I_SOC_ARCH1 :       0.0 gates(acc:   -nan%),       0.0 comb-gates +    0 pipeBits +   0 stateBits +   0 FBBits
**********************************************************/



module RV32I_SOC_ARCH1   (
    /* global inputs */
    clk, rst_n,

    /* inputs */
    G_io_uart_0_rx, G_io_uart_0_cts, G_io_uart_1_rx, G_io_uart_1_cts, G_io_gpio_sw_in, 
    G_io_intr_p_2, G_io_intr_p_3, G_io_intr_p_4, G_io_intr_p_5, G_io_intr_p_6, 

    /* outputs */
    G_io_uart_0_tx, G_io_uart_0_rts, G_io_uart_1_tx, G_io_uart_1_rts, G_io_gpio_seg7_dout, 
    G_io_gpio_seg7_an, G_io_gpio_led_out, G_RV32I_SOC_ARCH1_OUT

  );
  parameter M_ID = 0; // module ID

  
  /*input ports*/
  input        clk;
  input        rst_n;
  input        G_io_uart_0_rx ; /// <0,1> [U1]     ;
  input        G_io_uart_0_cts; /// <0,1> [U1]     ;
  input        G_io_uart_1_rx ; /// <0,1> [U1]     ;
  input        G_io_uart_1_cts; /// <0,1> [U1]     ;
  input [15:0] G_io_gpio_sw_in; /// <0,65535> [U16];
  input        G_io_intr_p_2  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_3  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_4  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_5  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_6  ; /// <0,1> [U1]     ;

  /*output ports*/
  output       G_io_uart_0_tx       ; /// <0,1> [U1]     ;
  output       G_io_uart_0_rts      ; /// <0,1> [U1]     ;
  output       G_io_uart_1_tx       ; /// <0,1> [U1]     ;
  output       G_io_uart_1_rts      ; /// <0,1> [U1]     ;
  output[ 7:0] G_io_gpio_seg7_dout  ; /// <0,255> [U8]   ;
  output[ 7:0] G_io_gpio_seg7_an    ; /// <0,255> [U8]   ;
  output[14:0] G_io_gpio_led_out    ; /// <0,32767> [U15];
  output       G_RV32I_SOC_ARCH1_OUT; /// <0,1> [U1]     ;

  /*internal wires*/
  wire         G_axi_s_ch_0_raddr_s_ready; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_waddr_s_ready; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_0_rdat_s_data  ; /// <0,4294967295> [U32];
  wire         G_axi_s_ch_0_rdat_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_0_rdat_s_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_rdat_s_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_wdat_s_ready ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_wres_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_0_wres_s_valid ; /// <0,1> [U1]          ;
  wire         G_io_intr_p_0             ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_raddr_s_ready; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_waddr_s_ready; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_1_rdat_s_data  ; /// <0,4294967295> [U32];
  wire         G_axi_s_ch_1_rdat_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_1_rdat_s_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_rdat_s_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_wdat_s_ready ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_wres_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_1_wres_s_valid ; /// <0,1> [U1]          ;
  wire         G_io_intr_p_1             ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_raddr_s_ready; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_waddr_s_ready; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_2_rdat_s_data  ; /// <0,4294967295> [U32];
  wire         G_axi_s_ch_2_rdat_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_2_rdat_s_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_rdat_s_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_wdat_s_ready ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_wres_s_resp  ; /// <0,0> [U0]          ;
  wire         G_axi_s_ch_2_wres_s_valid ; /// <0,1> [U1]          ;
  wire[15:0]   G_io_dbg_idx              ; /// <0,65535> [U16]     ;
  wire[31:0]   G_axi_m_ch_0_raddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 1:0]   G_axi_m_ch_0_raddr_m_size ; /// <0,3> [U2]          ;
  wire         G_axi_m_ch_0_raddr_m_valid; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_raddr_m_len  ; /// <0,0> [U0]          ;
  wire[ 2:0]   G_axi_m_ch_0_raddr_m_prot ; /// <0,7> [U3]          ;
  wire[31:0]   G_axi_m_ch_0_waddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 1:0]   G_axi_m_ch_0_waddr_m_size ; /// <0,3> [U2]          ;
  wire         G_axi_m_ch_0_waddr_m_valid; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_waddr_m_len  ; /// <0,0> [U0]          ;
  wire[ 2:0]   G_axi_m_ch_0_waddr_m_prot ; /// <0,7> [U3]          ;
  wire         G_axi_m_ch_0_rdat_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_m_ch_0_wdat_m_data  ; /// <0,4294967295> [U32];
  wire[ 3:0]   G_axi_m_ch_0_wdat_m_strobe; /// <0,15> [U4]         ;
  wire         G_axi_m_ch_0_wdat_m_valid ; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_wdat_m_last  ; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_wres_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_io_dbg_data             ; /// <0,4294967295> [U32];
  wire[ 3:0]   G_io_dbg_rv_state         ; /// <0,15> [U4]         ;
  wire         G_io_dbg_wfi              ; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_raddr_s_ready; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_waddr_s_ready; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_m_ch_0_rdat_s_data  ; /// <0,4294967295> [U32];
  wire[ 1:0]   G_axi_m_ch_0_rdat_s_resp  ; /// <0,3> [U2]          ;
  wire         G_axi_m_ch_0_rdat_s_valid ; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_rdat_s_last  ; /// <0,1> [U1]          ;
  wire         G_axi_m_ch_0_wdat_s_ready ; /// <0,1> [U1]          ;
  wire[ 1:0]   G_axi_m_ch_0_wres_s_resp  ; /// <0,3> [U2]          ;
  wire         G_axi_m_ch_0_wres_s_valid ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_0_raddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_0_raddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_0_raddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_0_raddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_0_raddr_m_prot ; /// <0,7> [U3]          ;
  wire[31:0]   G_axi_s_ch_0_waddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_0_waddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_0_waddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_0_waddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_0_waddr_m_prot ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_0_rdat_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_0_wdat_m_data  ; /// <0,4294967295> [U32];
  wire[ 3:0]   G_axi_s_ch_0_wdat_m_strobe; /// <0,15> [U4]         ;
  wire         G_axi_s_ch_0_wdat_m_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_wdat_m_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_0_wres_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_1_raddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_1_raddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_1_raddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_1_raddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_1_raddr_m_prot ; /// <0,7> [U3]          ;
  wire[31:0]   G_axi_s_ch_1_waddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_1_waddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_1_waddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_1_waddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_1_waddr_m_prot ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_1_rdat_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_1_wdat_m_data  ; /// <0,4294967295> [U32];
  wire[ 3:0]   G_axi_s_ch_1_wdat_m_strobe; /// <0,15> [U4]         ;
  wire         G_axi_s_ch_1_wdat_m_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_wdat_m_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_1_wres_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_2_raddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_2_raddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_2_raddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_2_raddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_2_raddr_m_prot ; /// <0,7> [U3]          ;
  wire[31:0]   G_axi_s_ch_2_waddr_m_addr ; /// <0,4294967295> [U32];
  wire[ 2:0]   G_axi_s_ch_2_waddr_m_size ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_2_waddr_m_valid; /// <0,1> [U1]          ;
  wire[ 3:0]   G_axi_s_ch_2_waddr_m_len  ; /// <0,15> [U4]         ;
  wire[ 2:0]   G_axi_s_ch_2_waddr_m_prot ; /// <0,7> [U3]          ;
  wire         G_axi_s_ch_2_rdat_m_ready ; /// <0,1> [U1]          ;
  wire[31:0]   G_axi_s_ch_2_wdat_m_data  ; /// <0,4294967295> [U32];
  wire[ 3:0]   G_axi_s_ch_2_wdat_m_strobe; /// <0,15> [U4]         ;
  wire         G_axi_s_ch_2_wdat_m_valid ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_wdat_m_last  ; /// <0,1> [U1]          ;
  wire         G_axi_s_ch_2_wres_m_ready ; /// <0,1> [U1]          ;

  RV32I_SOC_ARCH1_probed #(M_ID) M0   (
    /* global inputs */
    clk, rst_n,

    /* inputs */
    G_io_uart_0_rx, G_io_uart_0_cts, G_io_uart_1_rx, G_io_uart_1_cts, G_io_gpio_sw_in, 
    G_io_intr_p_2, G_io_intr_p_3, G_io_intr_p_4, G_io_intr_p_5, G_io_intr_p_6, 

    /* outputs */
    G_axi_s_ch_0_raddr_s_ready, G_axi_s_ch_0_waddr_s_ready, G_axi_s_ch_0_rdat_s_data, 
    G_axi_s_ch_0_rdat_s_resp, G_axi_s_ch_0_rdat_s_valid, G_axi_s_ch_0_rdat_s_last, 
    G_axi_s_ch_0_wdat_s_ready, G_axi_s_ch_0_wres_s_resp, G_axi_s_ch_0_wres_s_valid, 
    G_io_uart_0_tx, G_io_uart_0_rts, G_io_intr_p_0, G_axi_s_ch_1_raddr_s_ready, 
    G_axi_s_ch_1_waddr_s_ready, G_axi_s_ch_1_rdat_s_data, G_axi_s_ch_1_rdat_s_resp, 
    G_axi_s_ch_1_rdat_s_valid, G_axi_s_ch_1_rdat_s_last, G_axi_s_ch_1_wdat_s_ready, 
    G_axi_s_ch_1_wres_s_resp, G_axi_s_ch_1_wres_s_valid, G_io_uart_1_tx, G_io_uart_1_rts, 
    G_io_intr_p_1, G_axi_s_ch_2_raddr_s_ready, G_axi_s_ch_2_waddr_s_ready, G_axi_s_ch_2_rdat_s_data, 
    G_axi_s_ch_2_rdat_s_resp, G_axi_s_ch_2_rdat_s_valid, G_axi_s_ch_2_rdat_s_last, 
    G_axi_s_ch_2_wdat_s_ready, G_axi_s_ch_2_wres_s_resp, G_axi_s_ch_2_wres_s_valid, 
    G_io_gpio_seg7_dout, G_io_gpio_seg7_an, G_io_gpio_led_out, G_io_dbg_idx, G_axi_m_ch_0_raddr_m_addr, 
    G_axi_m_ch_0_raddr_m_size, G_axi_m_ch_0_raddr_m_valid, G_axi_m_ch_0_raddr_m_len, 
    G_axi_m_ch_0_raddr_m_prot, G_axi_m_ch_0_waddr_m_addr, G_axi_m_ch_0_waddr_m_size, 
    G_axi_m_ch_0_waddr_m_valid, G_axi_m_ch_0_waddr_m_len, G_axi_m_ch_0_waddr_m_prot, 
    G_axi_m_ch_0_rdat_m_ready, G_axi_m_ch_0_wdat_m_data, G_axi_m_ch_0_wdat_m_strobe, 
    G_axi_m_ch_0_wdat_m_valid, G_axi_m_ch_0_wdat_m_last, G_axi_m_ch_0_wres_m_ready, 
    G_io_dbg_data, G_io_dbg_rv_state, G_io_dbg_wfi, G_axi_m_ch_0_raddr_s_ready, 
    G_axi_m_ch_0_waddr_s_ready, G_axi_m_ch_0_rdat_s_data, G_axi_m_ch_0_rdat_s_resp, 
    G_axi_m_ch_0_rdat_s_valid, G_axi_m_ch_0_rdat_s_last, G_axi_m_ch_0_wdat_s_ready, 
    G_axi_m_ch_0_wres_s_resp, G_axi_m_ch_0_wres_s_valid, G_axi_s_ch_0_raddr_m_addr, 
    G_axi_s_ch_0_raddr_m_size, G_axi_s_ch_0_raddr_m_valid, G_axi_s_ch_0_raddr_m_len, 
    G_axi_s_ch_0_raddr_m_prot, G_axi_s_ch_0_waddr_m_addr, G_axi_s_ch_0_waddr_m_size, 
    G_axi_s_ch_0_waddr_m_valid, G_axi_s_ch_0_waddr_m_len, G_axi_s_ch_0_waddr_m_prot, 
    G_axi_s_ch_0_rdat_m_ready, G_axi_s_ch_0_wdat_m_data, G_axi_s_ch_0_wdat_m_strobe, 
    G_axi_s_ch_0_wdat_m_valid, G_axi_s_ch_0_wdat_m_last, G_axi_s_ch_0_wres_m_ready, 
    G_axi_s_ch_1_raddr_m_addr, G_axi_s_ch_1_raddr_m_size, G_axi_s_ch_1_raddr_m_valid, 
    G_axi_s_ch_1_raddr_m_len, G_axi_s_ch_1_raddr_m_prot, G_axi_s_ch_1_waddr_m_addr, 
    G_axi_s_ch_1_waddr_m_size, G_axi_s_ch_1_waddr_m_valid, G_axi_s_ch_1_waddr_m_len, 
    G_axi_s_ch_1_waddr_m_prot, G_axi_s_ch_1_rdat_m_ready, G_axi_s_ch_1_wdat_m_data, 
    G_axi_s_ch_1_wdat_m_strobe, G_axi_s_ch_1_wdat_m_valid, G_axi_s_ch_1_wdat_m_last, 
    G_axi_s_ch_1_wres_m_ready, G_axi_s_ch_2_raddr_m_addr, G_axi_s_ch_2_raddr_m_size, 
    G_axi_s_ch_2_raddr_m_valid, G_axi_s_ch_2_raddr_m_len, G_axi_s_ch_2_raddr_m_prot, 
    G_axi_s_ch_2_waddr_m_addr, G_axi_s_ch_2_waddr_m_size, G_axi_s_ch_2_waddr_m_valid, 
    G_axi_s_ch_2_waddr_m_len, G_axi_s_ch_2_waddr_m_prot, G_axi_s_ch_2_rdat_m_ready, 
    G_axi_s_ch_2_wdat_m_data, G_axi_s_ch_2_wdat_m_strobe, G_axi_s_ch_2_wdat_m_valid, 
    G_axi_s_ch_2_wdat_m_last, G_axi_s_ch_2_wres_m_ready, G_RV32I_SOC_ARCH1_OUT

  );

endmodule // RV32I_SOC_ARCH1

module RV32I_SOC_ARCH1_probed   (
    /* global inputs */
    clk, rst_n,

    /* inputs */
    G_io_uart_0_rx, G_io_uart_0_cts, G_io_uart_1_rx, G_io_uart_1_cts, G_io_gpio_sw_in, 
    G_io_intr_p_2, G_io_intr_p_3, G_io_intr_p_4, G_io_intr_p_5, G_io_intr_p_6, 

    /* outputs */
    G_axi_s_ch_0_raddr_s_ready, G_axi_s_ch_0_waddr_s_ready, G_axi_s_ch_0_rdat_s_data, 
    G_axi_s_ch_0_rdat_s_resp, G_axi_s_ch_0_rdat_s_valid, G_axi_s_ch_0_rdat_s_last, 
    G_axi_s_ch_0_wdat_s_ready, G_axi_s_ch_0_wres_s_resp, G_axi_s_ch_0_wres_s_valid, 
    G_io_uart_0_tx, G_io_uart_0_rts, G_io_intr_p_0, G_axi_s_ch_1_raddr_s_ready, 
    G_axi_s_ch_1_waddr_s_ready, G_axi_s_ch_1_rdat_s_data, G_axi_s_ch_1_rdat_s_resp, 
    G_axi_s_ch_1_rdat_s_valid, G_axi_s_ch_1_rdat_s_last, G_axi_s_ch_1_wdat_s_ready, 
    G_axi_s_ch_1_wres_s_resp, G_axi_s_ch_1_wres_s_valid, G_io_uart_1_tx, G_io_uart_1_rts, 
    G_io_intr_p_1, G_axi_s_ch_2_raddr_s_ready, G_axi_s_ch_2_waddr_s_ready, G_axi_s_ch_2_rdat_s_data, 
    G_axi_s_ch_2_rdat_s_resp, G_axi_s_ch_2_rdat_s_valid, G_axi_s_ch_2_rdat_s_last, 
    G_axi_s_ch_2_wdat_s_ready, G_axi_s_ch_2_wres_s_resp, G_axi_s_ch_2_wres_s_valid, 
    G_io_gpio_seg7_dout, G_io_gpio_seg7_an, G_io_gpio_led_out, G_io_dbg_idx, G_axi_m_ch_0_raddr_m_addr, 
    G_axi_m_ch_0_raddr_m_size, G_axi_m_ch_0_raddr_m_valid, G_axi_m_ch_0_raddr_m_len, 
    G_axi_m_ch_0_raddr_m_prot, G_axi_m_ch_0_waddr_m_addr, G_axi_m_ch_0_waddr_m_size, 
    G_axi_m_ch_0_waddr_m_valid, G_axi_m_ch_0_waddr_m_len, G_axi_m_ch_0_waddr_m_prot, 
    G_axi_m_ch_0_rdat_m_ready, G_axi_m_ch_0_wdat_m_data, G_axi_m_ch_0_wdat_m_strobe, 
    G_axi_m_ch_0_wdat_m_valid, G_axi_m_ch_0_wdat_m_last, G_axi_m_ch_0_wres_m_ready, 
    G_io_dbg_data, G_io_dbg_rv_state, G_io_dbg_wfi, G_axi_m_ch_0_raddr_s_ready, 
    G_axi_m_ch_0_waddr_s_ready, G_axi_m_ch_0_rdat_s_data, G_axi_m_ch_0_rdat_s_resp, 
    G_axi_m_ch_0_rdat_s_valid, G_axi_m_ch_0_rdat_s_last, G_axi_m_ch_0_wdat_s_ready, 
    G_axi_m_ch_0_wres_s_resp, G_axi_m_ch_0_wres_s_valid, G_axi_s_ch_0_raddr_m_addr, 
    G_axi_s_ch_0_raddr_m_size, G_axi_s_ch_0_raddr_m_valid, G_axi_s_ch_0_raddr_m_len, 
    G_axi_s_ch_0_raddr_m_prot, G_axi_s_ch_0_waddr_m_addr, G_axi_s_ch_0_waddr_m_size, 
    G_axi_s_ch_0_waddr_m_valid, G_axi_s_ch_0_waddr_m_len, G_axi_s_ch_0_waddr_m_prot, 
    G_axi_s_ch_0_rdat_m_ready, G_axi_s_ch_0_wdat_m_data, G_axi_s_ch_0_wdat_m_strobe, 
    G_axi_s_ch_0_wdat_m_valid, G_axi_s_ch_0_wdat_m_last, G_axi_s_ch_0_wres_m_ready, 
    G_axi_s_ch_1_raddr_m_addr, G_axi_s_ch_1_raddr_m_size, G_axi_s_ch_1_raddr_m_valid, 
    G_axi_s_ch_1_raddr_m_len, G_axi_s_ch_1_raddr_m_prot, G_axi_s_ch_1_waddr_m_addr, 
    G_axi_s_ch_1_waddr_m_size, G_axi_s_ch_1_waddr_m_valid, G_axi_s_ch_1_waddr_m_len, 
    G_axi_s_ch_1_waddr_m_prot, G_axi_s_ch_1_rdat_m_ready, G_axi_s_ch_1_wdat_m_data, 
    G_axi_s_ch_1_wdat_m_strobe, G_axi_s_ch_1_wdat_m_valid, G_axi_s_ch_1_wdat_m_last, 
    G_axi_s_ch_1_wres_m_ready, G_axi_s_ch_2_raddr_m_addr, G_axi_s_ch_2_raddr_m_size, 
    G_axi_s_ch_2_raddr_m_valid, G_axi_s_ch_2_raddr_m_len, G_axi_s_ch_2_raddr_m_prot, 
    G_axi_s_ch_2_waddr_m_addr, G_axi_s_ch_2_waddr_m_size, G_axi_s_ch_2_waddr_m_valid, 
    G_axi_s_ch_2_waddr_m_len, G_axi_s_ch_2_waddr_m_prot, G_axi_s_ch_2_rdat_m_ready, 
    G_axi_s_ch_2_wdat_m_data, G_axi_s_ch_2_wdat_m_strobe, G_axi_s_ch_2_wdat_m_valid, 
    G_axi_s_ch_2_wdat_m_last, G_axi_s_ch_2_wres_m_ready, G_RV32I_SOC_ARCH1_OUT

  );
  parameter M_ID = 0; // module ID

  
  /*input ports*/
  input        clk;
  input        rst_n;
  input        G_io_uart_0_rx ; /// <0,1> [U1]     ;
  input        G_io_uart_0_cts; /// <0,1> [U1]     ;
  input        G_io_uart_1_rx ; /// <0,1> [U1]     ;
  input        G_io_uart_1_cts; /// <0,1> [U1]     ;
  input [15:0] G_io_gpio_sw_in; /// <0,65535> [U16];
  input        G_io_intr_p_2  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_3  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_4  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_5  ; /// <0,1> [U1]     ;
  input        G_io_intr_p_6  ; /// <0,1> [U1]     ;

  /*output ports*/
  output       G_axi_s_ch_0_raddr_s_ready; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_waddr_s_ready; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_0_rdat_s_data  ; /// <0,4294967295> [U32];
  output       G_axi_s_ch_0_rdat_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_0_rdat_s_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_rdat_s_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_wdat_s_ready ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_wres_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_0_wres_s_valid ; /// <0,1> [U1]          ;
  output       G_io_uart_0_tx            ; /// <0,1> [U1]          ;
  output       G_io_uart_0_rts           ; /// <0,1> [U1]          ;
  output       G_io_intr_p_0             ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_raddr_s_ready; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_waddr_s_ready; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_1_rdat_s_data  ; /// <0,4294967295> [U32];
  output       G_axi_s_ch_1_rdat_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_1_rdat_s_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_rdat_s_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_wdat_s_ready ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_wres_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_1_wres_s_valid ; /// <0,1> [U1]          ;
  output       G_io_uart_1_tx            ; /// <0,1> [U1]          ;
  output       G_io_uart_1_rts           ; /// <0,1> [U1]          ;
  output       G_io_intr_p_1             ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_raddr_s_ready; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_waddr_s_ready; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_2_rdat_s_data  ; /// <0,4294967295> [U32];
  output       G_axi_s_ch_2_rdat_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_2_rdat_s_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_rdat_s_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_wdat_s_ready ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_wres_s_resp  ; /// <0,0> [U0]          ;
  output       G_axi_s_ch_2_wres_s_valid ; /// <0,1> [U1]          ;
  output[ 7:0] G_io_gpio_seg7_dout       ; /// <0,255> [U8]        ;
  output[ 7:0] G_io_gpio_seg7_an         ; /// <0,255> [U8]        ;
  output[14:0] G_io_gpio_led_out         ; /// <0,32767> [U15]     ;
  output[15:0] G_io_dbg_idx              ; /// <0,65535> [U16]     ;
  output[31:0] G_axi_m_ch_0_raddr_m_addr ; /// <0,4294967295> [U32];
  output[ 1:0] G_axi_m_ch_0_raddr_m_size ; /// <0,3> [U2]          ;
  output       G_axi_m_ch_0_raddr_m_valid; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_raddr_m_len  ; /// <0,0> [U0]          ;
  output[ 2:0] G_axi_m_ch_0_raddr_m_prot ; /// <0,7> [U3]          ;
  output[31:0] G_axi_m_ch_0_waddr_m_addr ; /// <0,4294967295> [U32];
  output[ 1:0] G_axi_m_ch_0_waddr_m_size ; /// <0,3> [U2]          ;
  output       G_axi_m_ch_0_waddr_m_valid; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_waddr_m_len  ; /// <0,0> [U0]          ;
  output[ 2:0] G_axi_m_ch_0_waddr_m_prot ; /// <0,7> [U3]          ;
  output       G_axi_m_ch_0_rdat_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_m_ch_0_wdat_m_data  ; /// <0,4294967295> [U32];
  output[ 3:0] G_axi_m_ch_0_wdat_m_strobe; /// <0,15> [U4]         ;
  output       G_axi_m_ch_0_wdat_m_valid ; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_wdat_m_last  ; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_wres_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_io_dbg_data             ; /// <0,4294967295> [U32];
  output[ 3:0] G_io_dbg_rv_state         ; /// <0,15> [U4]         ;
  output       G_io_dbg_wfi              ; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_raddr_s_ready; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_waddr_s_ready; /// <0,1> [U1]          ;
  output[31:0] G_axi_m_ch_0_rdat_s_data  ; /// <0,4294967295> [U32];
  output[ 1:0] G_axi_m_ch_0_rdat_s_resp  ; /// <0,3> [U2]          ;
  output       G_axi_m_ch_0_rdat_s_valid ; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_rdat_s_last  ; /// <0,1> [U1]          ;
  output       G_axi_m_ch_0_wdat_s_ready ; /// <0,1> [U1]          ;
  output[ 1:0] G_axi_m_ch_0_wres_s_resp  ; /// <0,3> [U2]          ;
  output       G_axi_m_ch_0_wres_s_valid ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_0_raddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_0_raddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_0_raddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_0_raddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_0_raddr_m_prot ; /// <0,7> [U3]          ;
  output[31:0] G_axi_s_ch_0_waddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_0_waddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_0_waddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_0_waddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_0_waddr_m_prot ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_0_rdat_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_0_wdat_m_data  ; /// <0,4294967295> [U32];
  output[ 3:0] G_axi_s_ch_0_wdat_m_strobe; /// <0,15> [U4]         ;
  output       G_axi_s_ch_0_wdat_m_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_wdat_m_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_0_wres_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_1_raddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_1_raddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_1_raddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_1_raddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_1_raddr_m_prot ; /// <0,7> [U3]          ;
  output[31:0] G_axi_s_ch_1_waddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_1_waddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_1_waddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_1_waddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_1_waddr_m_prot ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_1_rdat_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_1_wdat_m_data  ; /// <0,4294967295> [U32];
  output[ 3:0] G_axi_s_ch_1_wdat_m_strobe; /// <0,15> [U4]         ;
  output       G_axi_s_ch_1_wdat_m_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_wdat_m_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_1_wres_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_2_raddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_2_raddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_2_raddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_2_raddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_2_raddr_m_prot ; /// <0,7> [U3]          ;
  output[31:0] G_axi_s_ch_2_waddr_m_addr ; /// <0,4294967295> [U32];
  output[ 2:0] G_axi_s_ch_2_waddr_m_size ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_2_waddr_m_valid; /// <0,1> [U1]          ;
  output[ 3:0] G_axi_s_ch_2_waddr_m_len  ; /// <0,15> [U4]         ;
  output[ 2:0] G_axi_s_ch_2_waddr_m_prot ; /// <0,7> [U3]          ;
  output       G_axi_s_ch_2_rdat_m_ready ; /// <0,1> [U1]          ;
  output[31:0] G_axi_s_ch_2_wdat_m_data  ; /// <0,4294967295> [U32];
  output[ 3:0] G_axi_s_ch_2_wdat_m_strobe; /// <0,15> [U4]         ;
  output       G_axi_s_ch_2_wdat_m_valid ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_wdat_m_last  ; /// <0,1> [U1]          ;
  output       G_axi_s_ch_2_wres_m_ready ; /// <0,1> [U1]          ;
  output       G_RV32I_SOC_ARCH1_OUT     ; /// <0,1> [U1]          ;

  wire      ROOT_CP = 1'b1; /// root control path (always active)

  wire      RV32I_SOC_ARCH1_pSetup = 1'b1; /// pipeStageCount = 1




  //// pipe-stage(1) : combinational-logic...


/// unitNode(UART_AXI4L_step) : CFG[CLK*] IO[CLK*]
  UART_AXI4L_step M0 (
  /*inputs*/
    .clk(clk), .rst_n(rst_n),
    .G_axi_raddr_m_addr     (G_axi_s_ch_0_raddr_m_addr ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_raddr_m_valid    (G_axi_s_ch_0_raddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_raddr_m_len      (G_axi_s_ch_0_raddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_addr     (G_axi_s_ch_0_waddr_m_addr ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_valid    (G_axi_s_ch_0_waddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_len      (G_axi_s_ch_0_waddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_m_ready     (G_axi_s_ch_0_rdat_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_data      (G_axi_s_ch_0_wdat_m_data  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_valid     (G_axi_s_ch_0_wdat_m_valid ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wres_m_ready     (G_axi_s_ch_0_wres_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_uart_pin_rx          (G_io_uart_0_rx            ), // tgt[CLK*] <-- src[CLK*]
    .G_uart_pin_cts         (G_io_uart_0_cts           ), // tgt[CLK*] <-- src[CLK*]
  /*outputs*/
    .G_axi_raddr_s_ready    (G_axi_s_ch_0_raddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_s_ready    (G_axi_s_ch_0_waddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_data      (G_axi_s_ch_0_rdat_s_data  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_resp      (G_axi_s_ch_0_rdat_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_valid     (G_axi_s_ch_0_rdat_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_last      (G_axi_s_ch_0_rdat_s_last  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_s_ready     (G_axi_s_ch_0_wdat_s_ready ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_resp      (G_axi_s_ch_0_wres_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_valid     (G_axi_s_ch_0_wres_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_uart_pin_tx          (G_io_uart_0_tx            ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_uart_pin_rts         (G_io_uart_0_rts           ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_intr_out             (G_io_intr_p_0             )  // src[CLK*] --> tgt[CLK*] // latched  
  );

/// unitNode(UART_AXI4L_step) : CFG[CLK*] IO[CLK*]
  UART_AXI4L_step #(1) M1 (
  /*inputs*/
    .clk(clk), .rst_n(rst_n),
    .G_axi_raddr_m_addr     (G_axi_s_ch_1_raddr_m_addr ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_raddr_m_valid    (G_axi_s_ch_1_raddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_raddr_m_len      (G_axi_s_ch_1_raddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_addr     (G_axi_s_ch_1_waddr_m_addr ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_valid    (G_axi_s_ch_1_waddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_len      (G_axi_s_ch_1_waddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_m_ready     (G_axi_s_ch_1_rdat_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_data      (G_axi_s_ch_1_wdat_m_data  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_valid     (G_axi_s_ch_1_wdat_m_valid ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wres_m_ready     (G_axi_s_ch_1_wres_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_uart_pin_rx          (G_io_uart_1_rx            ), // tgt[CLK*] <-- src[CLK*]
    .G_uart_pin_cts         (G_io_uart_1_cts           ), // tgt[CLK*] <-- src[CLK*]
  /*outputs*/
    .G_axi_raddr_s_ready    (G_axi_s_ch_1_raddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_s_ready    (G_axi_s_ch_1_waddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_data      (G_axi_s_ch_1_rdat_s_data  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_resp      (G_axi_s_ch_1_rdat_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_valid     (G_axi_s_ch_1_rdat_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_last      (G_axi_s_ch_1_rdat_s_last  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_s_ready     (G_axi_s_ch_1_wdat_s_ready ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_resp      (G_axi_s_ch_1_wres_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_valid     (G_axi_s_ch_1_wres_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_uart_pin_tx          (G_io_uart_1_tx            ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_uart_pin_rts         (G_io_uart_1_rts           ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_intr_out             (G_io_intr_p_1             )  // src[CLK*] --> tgt[CLK*] // latched  
  );

/// unitNode(GPIO_AXI4L_step) : CFG[CLK*] IO[CLK*]
  GPIO_AXI4L_step M2 (
  /*inputs*/
    .clk(clk), .rst_n(rst_n),
    .G_axi_raddr_m_valid    (G_axi_s_ch_2_raddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_raddr_m_len      (G_axi_s_ch_2_raddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_addr     (G_axi_s_ch_2_waddr_m_addr ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_valid    (G_axi_s_ch_2_waddr_m_valid), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_m_len      (G_axi_s_ch_2_waddr_m_len  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_m_ready     (G_axi_s_ch_2_rdat_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_data      (G_axi_s_ch_2_wdat_m_data  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_m_valid     (G_axi_s_ch_2_wdat_m_valid ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wres_m_ready     (G_axi_s_ch_2_wres_m_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_gpio_pin_sw_in       (G_io_gpio_sw_in           ), // tgt[CLK*] <-- src[CLK*]
    .G_dbg_data             (G_io_dbg_data             ), // tgt[CLK*] <-- src[CLK*]
    .G_dbg_rv_state         (G_io_dbg_rv_state         ), // tgt[CLK*] <-- src[CLK*]
    .G_dbg_wfi              (G_io_dbg_wfi              ), // tgt[CLK*] <-- src[CLK*]
  /*outputs*/
    .G_axi_raddr_s_ready    (G_axi_s_ch_2_raddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_s_ready    (G_axi_s_ch_2_waddr_s_ready), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_data      (G_axi_s_ch_2_rdat_s_data  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_resp      (G_axi_s_ch_2_rdat_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_valid     (G_axi_s_ch_2_rdat_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_s_last      (G_axi_s_ch_2_rdat_s_last  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_s_ready     (G_axi_s_ch_2_wdat_s_ready ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_resp      (G_axi_s_ch_2_wres_s_resp  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_s_valid     (G_axi_s_ch_2_wres_s_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_gpio_pin_seg7_dout   (G_io_gpio_seg7_dout       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_gpio_pin_seg7_an     (G_io_gpio_seg7_an         ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_gpio_pin_led_out     (G_io_gpio_led_out         ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_dbg_idx              (G_io_dbg_idx              )  // src[CLK*] --> tgt[CLK*] // latched  
  );

/// unitNode(RV32I_ARCH1_step) : CFG[CLK*] IO[CLK*]
wire       G_RV32I_ARCH1_step_3_OUT    ;
  RV32I_ARCH1_step M3 (
  /*inputs*/
    .clk(clk), .rst_n(rst_n),
    .G_axi_raddr_s_ready    (G_axi_m_ch_0_raddr_s_ready), // tgt[CLK*] <-- src[CLK*]
    .G_axi_waddr_s_ready    (G_axi_m_ch_0_waddr_s_ready), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_s_data      (G_axi_m_ch_0_rdat_s_data  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_s_resp      (G_axi_m_ch_0_rdat_s_resp  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_rdat_s_valid     (G_axi_m_ch_0_rdat_s_valid ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wdat_s_ready     (G_axi_m_ch_0_wdat_s_ready ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wres_s_resp      (G_axi_m_ch_0_wres_s_resp  ), // tgt[CLK*] <-- src[CLK*]
    .G_axi_wres_s_valid     (G_axi_m_ch_0_wres_s_valid ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_0             (G_io_intr_p_0             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_1             (G_io_intr_p_1             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_2             (G_io_intr_p_2             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_3             (G_io_intr_p_3             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_4             (G_io_intr_p_4             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_5             (G_io_intr_p_5             ), // tgt[CLK*] <-- src[CLK*]
    .G_intr_p_6             (G_io_intr_p_6             ), // tgt[CLK*] <-- src[CLK*]
    .G_dbg_idx              (G_io_dbg_idx              ), // tgt[CLK*] <-- src[CLK*]
  /*outputs*/
    .G_axi_raddr_m_addr     (G_axi_m_ch_0_raddr_m_addr ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_raddr_m_size     (G_axi_m_ch_0_raddr_m_size ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_raddr_m_valid    (G_axi_m_ch_0_raddr_m_valid), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_raddr_m_len      (G_axi_m_ch_0_raddr_m_len  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_raddr_m_prot     (G_axi_m_ch_0_raddr_m_prot ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_m_addr     (G_axi_m_ch_0_waddr_m_addr ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_m_size     (G_axi_m_ch_0_waddr_m_size ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_m_valid    (G_axi_m_ch_0_waddr_m_valid), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_m_len      (G_axi_m_ch_0_waddr_m_len  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_waddr_m_prot     (G_axi_m_ch_0_waddr_m_prot ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_rdat_m_ready     (G_axi_m_ch_0_rdat_m_ready ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_m_data      (G_axi_m_ch_0_wdat_m_data  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_m_strobe    (G_axi_m_ch_0_wdat_m_strobe), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_m_valid     (G_axi_m_ch_0_wdat_m_valid ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wdat_m_last      (G_axi_m_ch_0_wdat_m_last  ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_axi_wres_m_ready     (G_axi_m_ch_0_wres_m_ready ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_dbg_data             (G_io_dbg_data             ), // src[CLK*] --> tgt[CLK*] // latched  
    .G_dbg_rv_state         (G_io_dbg_rv_state         ), // src[CLK*] --> tgt[CLK*] // latched  
    .G_dbg_wfi              (G_io_dbg_wfi              ), // src[CLK*] --> tgt[CLK*] // latched  
    .G_RV32I_ARCH1_step_OUT (G_RV32I_ARCH1_step_3_OUT  )  // src[CLK*] --> tgt[CLK*] // latched  
  );
assign     G_RV32I_SOC_ARCH1_OUT        =  G_RV32I_ARCH1_step_3_OUT  ; //  <FB>(comb-Out) (NL) [F(0.0)<0>,B(0.0)<0>] <0,1> [U1] P1 OP(assign:=)(rv32.cpp:L147)[RV32I_SOC_ARCH1]

/// unitNode(AXI4L_CTRL_1_3__connectChannel) : CFG[CLK*] IO[CLK*]
  AXI4L_CTRL_1_3__connectChannel M4 (
  /*inputs*/
    .clk(clk), .rst_n(rst_n),
    .G_bus_m_ch_0_raddr_m_addr  (G_axi_m_ch_0_raddr_m_addr       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_raddr_m_size  ({1'b0,G_axi_m_ch_0_raddr_m_size}), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_raddr_m_valid (G_axi_m_ch_0_raddr_m_valid      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_raddr_m_len   ({3'b0,G_axi_m_ch_0_raddr_m_len} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_raddr_m_prot  (G_axi_m_ch_0_raddr_m_prot       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_waddr_m_addr  (G_axi_m_ch_0_waddr_m_addr       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_waddr_m_size  ({1'b0,G_axi_m_ch_0_waddr_m_size}), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_waddr_m_valid (G_axi_m_ch_0_waddr_m_valid      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_waddr_m_len   ({3'b0,G_axi_m_ch_0_waddr_m_len} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_waddr_m_prot  (G_axi_m_ch_0_waddr_m_prot       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_rdat_m_ready  (G_axi_m_ch_0_rdat_m_ready       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_wdat_m_data   (G_axi_m_ch_0_wdat_m_data        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_wdat_m_strobe (G_axi_m_ch_0_wdat_m_strobe      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_wdat_m_valid  (G_axi_m_ch_0_wdat_m_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_wdat_m_last   (G_axi_m_ch_0_wdat_m_last        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_m_ch_0_wres_m_ready  (G_axi_m_ch_0_wres_m_ready       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_raddr_s_ready (G_axi_s_ch_0_raddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_waddr_s_ready (G_axi_s_ch_0_waddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_rdat_s_data   (G_axi_s_ch_0_rdat_s_data        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_rdat_s_resp   ({1'b0,G_axi_s_ch_0_rdat_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_rdat_s_valid  (G_axi_s_ch_0_rdat_s_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_rdat_s_last   (G_axi_s_ch_0_rdat_s_last        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_wdat_s_ready  (G_axi_s_ch_0_wdat_s_ready       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_wres_s_resp   ({1'b0,G_axi_s_ch_0_wres_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_0_wres_s_valid  (G_axi_s_ch_0_wres_s_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_raddr_s_ready (G_axi_s_ch_1_raddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_waddr_s_ready (G_axi_s_ch_1_waddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_rdat_s_data   (G_axi_s_ch_1_rdat_s_data        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_rdat_s_resp   ({1'b0,G_axi_s_ch_1_rdat_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_rdat_s_valid  (G_axi_s_ch_1_rdat_s_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_rdat_s_last   (G_axi_s_ch_1_rdat_s_last        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_wdat_s_ready  (G_axi_s_ch_1_wdat_s_ready       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_wres_s_resp   ({1'b0,G_axi_s_ch_1_wres_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_1_wres_s_valid  (G_axi_s_ch_1_wres_s_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_raddr_s_ready (G_axi_s_ch_2_raddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_waddr_s_ready (G_axi_s_ch_2_waddr_s_ready      ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_rdat_s_data   (G_axi_s_ch_2_rdat_s_data        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_rdat_s_resp   ({1'b0,G_axi_s_ch_2_rdat_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_rdat_s_valid  (G_axi_s_ch_2_rdat_s_valid       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_rdat_s_last   (G_axi_s_ch_2_rdat_s_last        ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_wdat_s_ready  (G_axi_s_ch_2_wdat_s_ready       ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_wres_s_resp   ({1'b0,G_axi_s_ch_2_wres_s_resp} ), // tgt[CLK*] <-- src[CLK*]
    .G_bus_s_ch_2_wres_s_valid  (G_axi_s_ch_2_wres_s_valid       ), // tgt[CLK*] <-- src[CLK*]
  /*outputs*/
    .G_bus_m_ch_0_raddr_s_ready (G_axi_m_ch_0_raddr_s_ready      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_waddr_s_ready (G_axi_m_ch_0_waddr_s_ready      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_rdat_s_data   (G_axi_m_ch_0_rdat_s_data        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_rdat_s_resp   (G_axi_m_ch_0_rdat_s_resp        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_rdat_s_valid  (G_axi_m_ch_0_rdat_s_valid       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_rdat_s_last   (G_axi_m_ch_0_rdat_s_last        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_wdat_s_ready  (G_axi_m_ch_0_wdat_s_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_wres_s_resp   (G_axi_m_ch_0_wres_s_resp        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_m_ch_0_wres_s_valid  (G_axi_m_ch_0_wres_s_valid       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_raddr_m_addr  (G_axi_s_ch_0_raddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_raddr_m_size  (G_axi_s_ch_0_raddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_raddr_m_valid (G_axi_s_ch_0_raddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_raddr_m_len   (G_axi_s_ch_0_raddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_raddr_m_prot  (G_axi_s_ch_0_raddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_waddr_m_addr  (G_axi_s_ch_0_waddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_waddr_m_size  (G_axi_s_ch_0_waddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_waddr_m_valid (G_axi_s_ch_0_waddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_waddr_m_len   (G_axi_s_ch_0_waddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_waddr_m_prot  (G_axi_s_ch_0_waddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_rdat_m_ready  (G_axi_s_ch_0_rdat_m_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_wdat_m_data   (G_axi_s_ch_0_wdat_m_data        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_wdat_m_strobe (G_axi_s_ch_0_wdat_m_strobe      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_wdat_m_valid  (G_axi_s_ch_0_wdat_m_valid       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_wdat_m_last   (G_axi_s_ch_0_wdat_m_last        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_0_wres_m_ready  (G_axi_s_ch_0_wres_m_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_raddr_m_addr  (G_axi_s_ch_1_raddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_raddr_m_size  (G_axi_s_ch_1_raddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_raddr_m_valid (G_axi_s_ch_1_raddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_raddr_m_len   (G_axi_s_ch_1_raddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_raddr_m_prot  (G_axi_s_ch_1_raddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_waddr_m_addr  (G_axi_s_ch_1_waddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_waddr_m_size  (G_axi_s_ch_1_waddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_waddr_m_valid (G_axi_s_ch_1_waddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_waddr_m_len   (G_axi_s_ch_1_waddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_waddr_m_prot  (G_axi_s_ch_1_waddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_rdat_m_ready  (G_axi_s_ch_1_rdat_m_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_wdat_m_data   (G_axi_s_ch_1_wdat_m_data        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_wdat_m_strobe (G_axi_s_ch_1_wdat_m_strobe      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_wdat_m_valid  (G_axi_s_ch_1_wdat_m_valid       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_wdat_m_last   (G_axi_s_ch_1_wdat_m_last        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_1_wres_m_ready  (G_axi_s_ch_1_wres_m_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_raddr_m_addr  (G_axi_s_ch_2_raddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_raddr_m_size  (G_axi_s_ch_2_raddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_raddr_m_valid (G_axi_s_ch_2_raddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_raddr_m_len   (G_axi_s_ch_2_raddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_raddr_m_prot  (G_axi_s_ch_2_raddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_waddr_m_addr  (G_axi_s_ch_2_waddr_m_addr       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_waddr_m_size  (G_axi_s_ch_2_waddr_m_size       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_waddr_m_valid (G_axi_s_ch_2_waddr_m_valid      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_waddr_m_len   (G_axi_s_ch_2_waddr_m_len        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_waddr_m_prot  (G_axi_s_ch_2_waddr_m_prot       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_rdat_m_ready  (G_axi_s_ch_2_rdat_m_ready       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_wdat_m_data   (G_axi_s_ch_2_wdat_m_data        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_wdat_m_strobe (G_axi_s_ch_2_wdat_m_strobe      ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_wdat_m_valid  (G_axi_s_ch_2_wdat_m_valid       ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_wdat_m_last   (G_axi_s_ch_2_wdat_m_last        ), // src[CLK*] --> tgt[CLK*] // unlatched
    .G_bus_s_ch_2_wres_m_ready  (G_axi_s_ch_2_wres_m_ready       )  // src[CLK*] --> tgt[CLK*] // unlatched
  );

  /*probe assignments*/

endmodule // RV32I_SOC_ARCH1_probed

